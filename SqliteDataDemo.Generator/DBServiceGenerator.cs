using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace SqliteDataDemoGenerator
{
    [Generator]
    public class DBServiceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUG         

            if (!Debugger.IsAttached)
            {
                Debugger.Launch();
            }
#endif
        }

        public void Execute(GeneratorExecutionContext context)
        {
            //#if DEBUG         

            //            if (!Debugger.IsAttached)
            //            {
            //                Debugger.Launch();
            //            }
            //#endif            
            if (context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.MSBuildProjectDirectory", out var projectDirectory) == false)
            {
                throw new ArgumentException("MSBuildProjectDirectory should be specified");
            }
                        
            var syntaxTrees = context.Compilation.SyntaxTrees;
            SyntaxTree myDbContextSyntaxTree = syntaxTrees.First(x => x.FilePath.Contains("MyDbContext.cs"));                        
            var root = myDbContextSyntaxTree.GetRoot() as CompilationUnitSyntax;
            var classdef = root.DescendantNodes().OfType<ClassDeclarationSyntax>().First();

            foreach (var member in classdef.Members)
            {
                if(member is PropertyDeclarationSyntax p)
                {
                    var property = (PropertyDeclarationSyntax)member;
                    
                    if(((GenericNameSyntax)property.Type).Identifier.Value.Equals("DbSet"))
                    {
                        foreach (AttributeListSyntax a in member.AttributeLists)
                        {
                            if (a.Attributes.Any(currentAttribute => currentAttribute.Name.GetText().ToString().Contains("GenerateUI")))
                            {
                                var dataFieldName = property.Identifier.ValueText;
                                //var propType = ((GenericNameSyntax)property.Type).Identifier.Value;
                                var dataClassName = dataFieldName.Remove(dataFieldName.Length - 1,1);
                                
                                var sourceDBService = GetDbServiceClass(dataClassName);
                                context.AddSource(dataClassName + "DbService.g.cs", sourceDBService);

                                var sourceCustomEventArgs = GetCustomEventArgsClass(dataClassName);
                                context.AddSource(dataClassName + "EventArgs.g.cs", sourceCustomEventArgs);
                                
                                var razorFolder = Path.Combine(projectDirectory, "AutoGeneratedRazorFiles");
                                if (!Directory.Exists(razorFolder))
                                {
                                    Directory.CreateDirectory(razorFolder);
                                }

                                var sourceRazorPage = GetRazorPage(dataClassName);
                                File.WriteAllText(Path.Combine(razorFolder, $"{dataClassName}Page.razor"), sourceRazorPage);

                                var sourceFormComponent = GetFormComponent(dataClassName);
                                File.WriteAllText(Path.Combine(razorFolder, $"{dataClassName}Form.razor"), sourceFormComponent);

                                var dataClassProperties = GetPropertiesOfDataObject(syntaxTrees.First(x => x.FilePath.Contains(dataClassName+".cs")));
                                var sourceGridComponent = GetGridComponent(dataClassName, dataClassProperties);
                                File.WriteAllText(Path.Combine(razorFolder, $"{dataClassName}Grid.razor"), sourceGridComponent);
                            }
                        }
                    }
                }
            }
        }

        List<string> GetPropertiesOfDataObject(SyntaxTree input)
        {
            var result = new List<string>();

            var root = input.GetRoot() as CompilationUnitSyntax;
            var classdef = root.DescendantNodes().OfType<ClassDeclarationSyntax>().First();

            foreach (var member in classdef.Members)
            {
                if (member is PropertyDeclarationSyntax p)
                {
                    var property = (PropertyDeclarationSyntax)member;
                    var propName = property.Identifier.ValueText;
                    result.Add(propName);
                }
            }
            return result;
        }

        string GetDbServiceClass(string dataClassName)
        {
            string Name = dataClassName;
            string NameLower = dataClassName.ToLower();
            
            var sourceCode = $@"// <auto-generated />

using Microsoft.EntityFrameworkCore;

namespace SqliteDataDemo.Data
{{
public partial class MyDbService
{{

public async Task<List<{Name}>> Get{Name}sAsync()
        {{
            return await _dbContext.{Name}s.ToListAsync();
        }}

        public async Task<{Name}> Add{Name}Async({Name} {NameLower})
        {{
            try
            {{
                _dbContext.{Name}s.Add({NameLower});
                await _dbContext.SaveChangesAsync();
            }}
            catch (Exception ex)
            {{
                throw;
            }}
            return {NameLower};
        }}

        public async Task<{Name}> Update{Name}Async({Name} {NameLower})
        {{
            try
            {{
                var {NameLower}Exist = _dbContext.{Name}s.FirstOrDefault(c => c.Id == {NameLower}.Id);
                if ({NameLower}Exist != null)
                {{
                    _dbContext.Update({NameLower});
                    await _dbContext.SaveChangesAsync();
                }}
            }}
            catch(Exception ex)
            {{
                throw;
            }}
            return {NameLower};
        }}

        public async Task Delete{Name}Async({Name} {NameLower})
        {{
            try
            {{
                _dbContext.{Name}s.Remove({NameLower});
                await _dbContext.SaveChangesAsync();
            }}
            catch (Exception ex)
            {{
                throw;
            }}
        }}
}}
}}";
            return sourceCode;
        }

        string GetCustomEventArgsClass(string dataClassName)
        {
            string Name = dataClassName;
            string NameLower = dataClassName.ToLower();

            var sourceCode = $@"// <auto-generated />
namespace  SqliteDataDemo.Data
{{
    public class {Name}EventArgs
    {{
        public {Name} {Name} {{ get; set; }}
        public {Name}EventArgs({Name} {NameLower})
        {{
            {Name} = {NameLower};
        }}
    }}
}}
            ";

            return sourceCode;
        }

        string GetRazorPage(string dataClassName)
        {
            string Name = dataClassName;
            string NameLower = dataClassName.ToLower();

            var sourceCode = $@"
@*auto-generated file*@
@page ""/{Name}s""
@using Meziantou.AspNetCore.Components
@using SqliteDataDemo.Data

@inject MyDbService service

<div class=""container"">

    <{Name}Grid 
                 {Name}List=""@{Name}s"" 
                 On{Name}DeleteClick=""@Delete{Name}"" 
                 On{Name}SelectClick=""@Set{Name}ForUpdate"">
    </{Name}Grid>

    <div class=""row m-5"">
        <div class=""col-5 bg-light m-2 justify-content-start"">
            <div class=""p-3 mb-3 bg-primary text-white text-center"">Add New Product</div>
            <{Name}Form {NameLower}=""@New{Name}"" OnBtnSubmitClick=""@AddNew{Name}""></{Name}Form>
        </div>

        <div class=""col-5 bg-light m-2 justify-content-end"">
            <div class=""p-3 mb-1 bg-primary text-white text-center"">Update Product</div>
            <{Name}Form {NameLower}=""@Update{Name}"" OnBtnSubmitClick=""@Update{Name}Data""></{Name}Form>          
        </div>
    </div>
</div>

@code {{

    public {Name} New{Name} {{ get; set; }} = new {Name}();
    {Name} Update{Name} = new {Name}();
    List<{Name}> {Name}s = new List<{Name}>();
    //Mes
    protected override async Task OnInitializedAsync()
    {{
        await Refresh{Name}s();
    }}

    private async Task Refresh{Name}s()
    {{
        {Name}s = await service.Get{Name}sAsync();
    }}

    
    private async Task AddNew{Name}({Name}EventArgs args)
    {{
        await service.Add{Name}Async(args.{Name});
        New{Name} = new {Name}();
        await Refresh{Name}s();
    }}

    
    private void Set{Name}ForUpdate({Name}EventArgs args)
    {{
        Update{Name} = args.{Name};
    }}

    private async Task Update{Name}Data({Name}EventArgs args)
    {{
        await service.Update{Name}Async(args.{Name});
        await Refresh{Name}s();
    }}

    private async Task Delete{Name}({Name}EventArgs args)
    {{
        await service.Delete{Name}Async(args.{Name});
        await Refresh{Name}s();
    }} 
}}
            ";

            return sourceCode;

        }

        string GetFormComponent(string dataClassName)
        {
            string Name = dataClassName;
            string NameLower = dataClassName.ToLower();

            var sourceCode = $@"
@*auto-generated file*@

@using Meziantou.AspNetCore.Components
@using SqliteDataDemo.Data

<EditForm Model=""@{NameLower}"" OnSubmit=""() => {{ }}"">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <GenericForm Model=""@{NameLower}"" EditorClass=""form-control"">
        <FieldTemplate Context=""field"">
            <div class=""form-group"">
                <label for=""@field.EditorId"">@field.DisplayName</label>
                @field.EditorTemplate
                @field.FieldValidationTemplate
            </div>
        </FieldTemplate>
    </GenericForm>

    <button type=""submit"" @onclick=""OnSubmit"">Submit</button>
</EditForm>

@code {{

    [Parameter]
    [EditorRequired]
    public {Name} {NameLower} {{ get; set; }}

    [Parameter]
    [EditorRequired]
    public EventCallback<{Name}EventArgs> OnBtnSubmitClick {{ get; set; }}

    private void OnSubmit()
    {{
        OnBtnSubmitClick.InvokeAsync(new {Name}EventArgs({NameLower}));
    }}
}}
";

            return sourceCode;
        }
        
        string GetGridComponent(string dataClassName, List<string> properties)
        {
            string Name = dataClassName;
            string NameLower = dataClassName.ToLower();
            StringBuilder source = new StringBuilder();

            var sourceCodeFirstPart = $@"
@using SqliteDataDemo.Data

<div class=""row bg-light"">
    <table class=""table table-bordered"">
        <thead class=""thead-dark"">
            <tr>";

            source.Append(sourceCodeFirstPart);
            foreach(string p in properties)
            {
                source.Append($@"<th>{p}</th>");
            }

            var sourceCodeSecondPart = $@"<th>Delete {Name}</th>
            </tr>
        </thead>
        <tbody>
            @if ({Name}List.Any())
            {{
                @foreach (var {NameLower} in {Name}List)
                {{
                    <tr @onclick=""(() => Set{Name}ForUpdate({NameLower}))"">";

            source.Append(sourceCodeSecondPart);
            foreach (string p in properties)
            {
                source.Append($@"<td>@{NameLower}.{p}</td>");
            }               
            var sourceCodeLastPart = $@"
                        <td><button class=""btn btn-danger"" @onclick=""(() => Delete{Name}({NameLower}))"">Delete</button></td>
                    </tr>
                }}
            }}
            else
            {{
                <tr><td colspan=""6""><strong>No products available</strong></td></tr>
            }}
        </tbody>
    </table>
</div>

@code {{

    [Parameter]
    [EditorRequired]
    public List<{Name}> {Name}List {{ get; set; }}

    [Parameter]
    [EditorRequired]
    public EventCallback<{Name}EventArgs> On{Name}SelectClick {{ get; set; }} 

    [Parameter]
    [EditorRequired]
    public EventCallback<{Name}EventArgs> On{Name}DeleteClick {{ get; set; }}


    private void Set{Name}ForUpdate({Name} {NameLower})
    {{
        On{Name}SelectClick.InvokeAsync(new {Name}EventArgs({NameLower}));
    }}

    private void Delete{Name}({Name} {NameLower})
    {{
        On{Name}DeleteClick.InvokeAsync(new {Name}EventArgs({NameLower}));
    }}


}}

";
            source.Append(sourceCodeLastPart);
            return source.ToString();
        }
    }
}